アプリケーションの名前：過去メモ
コンセプト：過去に自分が考えたアイデアを思い出すきっかけをつくり、そのアイデアをさらに深めるメモ帳
サービス説明、概要：過去のメモを思い出すきっかけを作るため、メモ帳の上部に過去のメモをランダム表示する。また、そのメモに対して現在の考えをメモできる
制作目的：一度メモしたアイデアは忘れてしまい、振り返る機会がなかなかなかった。しかし、過去のアイデアを時間をおいてからもう一度振り返ることで、良いアイデアが浮かぶことがある。過去のメモを振り返りやすいメモ帳を使えば、その問題が解決され、良いアイデアを生み出す手助けができると考えた。

想定されたユーザー(ターゲット)：アイデアを生み出したい人。過去のメモに書いたアイデアを忘れてしまう人。
ユーザーが持つ課題：過去のメモに書いたアイデアが使われないまま忘れ去られてしまう。
？課題の解決方法：メモ帳の上部に過去のメモをランダム表示する。また、そのメモに対して現在の考えをメモできる
使用技術：Laravel8、Vue.js3、MYSQL
選定理由：使い慣れていたため。
今後追加したい機能など：

制作過程＋制作意図：
制作上の課題、解決策：
こだわり(工夫、挑戦)：

＜？になった＞
・"export 'createRouter' was not found in 'vue-router' エラーが出てくる。
npm install -D vue-routerでルーターを入れたが、npm install -D vue-router@nextにしないといけなかった。そのまま上書きしがエラーがでる。npm remove vue-routerで消して、もう一度npm install -D vue-router@nextするも、ERROR in ./node_modules/vue-router/dist/vue-router.esm.jsエラー。npm run watchを止めて、もう一度npm run watchをすると、なおっている
→vueが2になってたから消して3を入れなおしたらrouterがないエラー

・npm install vuex@nextを一度消してnpm remove vuex、npm install -D vuex@next
→vuexについてhttps://reffect.co.jp/vue/understaind-vue-basic

・UTCの日付形式（例：2021-07-21T04:37:47.000000Z）になってしまいます。
→Vueのday.jsでformatを変えるか、laravelで変えるか？
→vueのday.jsで
<small class="card-text">{{ makeDate(memo.updated_at) }}</small>
<script>
    methods:{
      makeDate(date){
        return dayjs(date).format('YYYY/MM/DD HH:mm:ss')
      }
    },
</script>

・ランダムな数字をセットするのをstoreのactionsにするか、mutationsにするか悩んだが、最初の読み込み時のみactionから呼び出せばいいので、mutationsに。

・veuからLaravelへデータを追加（メモ新規作成）
    ・MemoForm.vue
    import axios from 'axios'
    import {baseurl} from '../const'
    export default {
        //今回は例なのでmounted
        mounted() {
            const url = baseurl + 'api/memos'
            axios.post(url,{
                title:'テスト',
                content:'内容',
            }).then((response) => {
                // axiosが成功したときのHTTPレスポンスを表示
                console.log(response)
            }).catch((error) => {
                // axiosが失敗したときのエラーを表示
                console.log(error)
            })
        },
    }

    ・const.js
    export const baseurl = 'http://127.0.0.1:8000/'
    export default baseurl

    ・$ php artisan route:listで調べると、
    | POST      | api/memos           | memos.store
    なので、
    ・MemoController.phpのstoreを編集。※バリデーションを追加
    public function store(Request $request)
    {
        $memo = new Memo();
        $memo->fill($request->all())->save();
    }

・一部だけ右寄せ：ml-autoだと効かないのでflex-grow-1
・navbarはjustify-content-endだとトグルの上にnewがくるのでflex-grow-1
https://getbootstrap.jp/docs/4.2/utilities/flex/

・タイトルを入力してエンターを押したらメモ本文が書けるようにしたい
@keyup.enter="$event.target.nextElementSibling.focus()"
    →使ってみると邪魔に感じるのでよりいい方法を思いつくまでは消しておく

・「メモを保存せずブラウザバックしたら、注意メッセージ」の試行錯誤
        created() {
            window.addEventListener('popstate', this.backAlert);
        },
        backAlert() {
      // if (!this.newMemo.content) {
      //       this.errorMessage = "本文を記入してください";

      //     }
        if(this.flag){
            //this.errorMessage = "変更された内容があります。保存しますか？"
            if(window.confirm('変更された内容があります。保存しますか？')){
            //if(){
            this.flag = false;
            if (!this.newMemo.content) {
                const ans = window.confirm('本文を記入してください');
                if(ans){
                this.$router.push({ name: "MemoForm" });
                }
            }
            this.addNewMemo();
            }else{
            this.flag = false;
            this.ret();
            };
        }
        }

・メモを保存せずブラウザバックしたら、注意メッセージ
        @input="flagChange"
    で入力を始めていたらメソッドの
        flagChange() {
        this.flag = true;
        },
    でdata()の
        flag: false
    をTrueに変える。
    あとは https://qiita.com/mimoe/items/ccd57821c3ae6b4f8495
    を参考に
    →新規作成ボタンを押しても、注意メッセージが表示されてしまう
        addNewMemo() {
            this.flag = false;
        を追加することで、注意メッセージが表示されないようにした。
    
・過去メモを非表示の試行錯誤
    Navbar
        <button 
            class="dropdown-item" 
            type="button" 
            data-toggle="collapse" 
            data-target="#collapsePastMemo" 
            aria-expanded="true" 
            aria-controls="collapsePastMemo"
        >過去メモ非表示</button>
    MemoList
        <div class="col-md-3 collapse" id="collapsePastMemo">
    collapseではなく、クリックイベントで表示を変える
        <button 
            class="dropdown-item" 
            @click="changeShow()"
        >過去メモ非表示</button>
    非表示にはできるが、横幅を詰めなかったので、showがfalseの時は過去メモでない側は全部の幅を使って表示させる。
    v-bind:class="[$store.state.show === true ? 'col-md-9' : 'col-md-12']"

・検索の試行錯誤
        <input v-model="filterQuery.title" @change="search" class="form-control" type="search" placeholder="タイトル検索..." aria-label="検索...">-->
        <input v-model="filterQuery.content" @change="search" class="form-control" type="search" placeholder="本文検索..." aria-label="検索...">
        data() {
            return {
                filterQuery: {
                    title: "",
                    content: "",
                }
    と二種類に分けて検索するのが嫌で、タイトルも本文も同時に検索できるようにしたい
        <input v-model="filterQuery" @change="search" class="form-control" type="search" placeholder="検索..." aria-label="検索...">
    から@change="search"けして、ボタンで検索開始する
        <button v-on:click.prevent="search" >検索</button>
    preventいらない
        <RouterLink 
            tag="button" 
            v-on:click="searchMemo" 
            to="/Searched" 
        >検索</RouterLink>
    Navbarのメソッド
        methods: {
        // mapMutationsをスプレット演算子を使って呼び出すことで、setFilterQueryをそのまま出せる
        // .スプレット演算子(...)はオブジェクトを展開できる
        ...mapMutations(["setFilterQuery"]),
        searchMemo() {
        // mapMutationsで呼び出したsetFilterQueryの呼び出し。引数はそのまま入れる
        this.setFilterQuery(this.filterQuery);
        console.log("実行した");
            },
        },
    store.js
        getters: {
        filteredMemos: (state)=> {
            let data = state.memos;
            if (state.filterQuery != ""){
                    data = data.filter(function (memo){
                        return (
                            memo.title.indexOf(state.filterQuery)!== -1 ||
                            memo.content.indexOf(state.filterQuery) !== -1
                            );
                    });
                }
                console.log(data);
            return data;
            
            // タイトル検索
            // if (state.filterQuery.title != ""){
            //     data = data.filter(function (row){
            //         return row['title'].indexOf(state.filterQuery.title) !== -1;
            //     });
            // }
            // 本文検索
            // if (state.filterQuery.content != ""){
            //     data = data.filter(function (row){
            //         return row['content'].indexOf(state.filterQuery.content) !== -1;
            //     });
            // }
            // return data;
        }

・store.jsのactionの書き方はどっちがいいのか？
    actions: {
        async getMemos( {commit} ) {
            const response = await axios.get("http://127.0.0.1:8000/api/memos")
            commit('setMemos', response.data)
            commit('setMaxMemo', response.data.length)
            commit('setRandomMemo')
        },
        // getMemos: ({commit})=>{
        //     return axios.get("http://127.0.0.1:8000/api/memos").then(response => {
        //         commit('setMemos',response.data);
        //         commit('setMaxMemo', response.data.length);
        //         commit('setRandomMemo');
        //     })
        // },
    }

・戻るボタン
        <button @click="ret"
    メソッド
        ret() {
            this.$router.push({
                name: "MemoList",
            });
        },
    を変える
        <button @click="$router.go(-1)"

・戻るボタン、検索結果画面だけ左側に配置していたが、違和感があったので右側にそろえる

・エラーメッセージの連想配列：2度目以降に正しい入力をしたとき、表示したエラーメッセージを消す
        //delete(this.errors['name']);
        this.errors.name = ""

・ログインユーザーのデータのみを取り出す
    すべてのメモを表示するとき
        // $memos = Memo::all();
        // return $memos;
    ログインユーザーのmemoのみを取り出す
        // if ($request->ajax()) {
        //     $memos =  Memo::all();
        //     return response()->json(['memos' => $memos]);
        // } else {
        //     return view('memos.memoList');
        // }
    はだめだったので変える
        $memos = Auth::user()->memos;
        return $memos;

・メモを新規作成するときログインユーザーのidを紐づける
    ユーザーidを気にせずに保存
        // $memo = new Memo();
        // $memo->fill($request->all())->save();
    ログインユーザーのidを付与
        // Memo::create([
        //     'user_id'=>$request->user_id,
        //     'tilte'=>$request->title,
        //     'content'=>$request->content,
        // ]);
    はダメだったので変える
        $memo = new Memo();
        $memo->user_id = auth()->id();
        $memo->title = $request->title;
        $memo->content = $request->content;
        $memo->save();
        
・①ログインだと問題ないが、新規会員登録すると他のユーザーのメモが表示されたMemoListに移動してしまうor②メモがないので画面が表示される
    →とりあえず②の解決のため初回のメモが0のときの画面を表示する
    MemoList
        <!-- ▼メモが0の時、初回の説明画面を表示する -->
        <div v-if="$store.state.firstFlag">
            「New」ボタンを押してメモを新規作成してください。
        </div>
        <!-- ▲メモが0の時、初回の説明画面を表示する -->
        <div v-else>
    MemoListのmounted()
        // if(this.$store.state.maxMemo === 0){
            // this.$store.commit('setFirstFlag',true);
        // }else{
            // this.$store.commit('setFirstFlag',false);
        // }
    store.jsのgetMemosにまとめる
        return await axios
            .get("http://127.0.0.1:8000/api/memos")
            .then(response => {
                commit('setMemos', response.data)
                commit('setMaxMemo', response.data.length)
                commit('setRandomMemo')
                // メモが0の時、初回の説明画面を表示するためのフラグを設定する
                if(response.data.length === 0){
                    commit('setFirstFlag',true);
                }else{
                    commit('setFirstFlag',false);
                }
            })
    ①の解決にはstore.jsの会員登録を
        async register({ dispatch }, credentials) {
            await axios.get('/sanctum/csrf-cookie');
            // 新規ユーザーの作成
            await axios.post('/api/register', credentials);
            // 新規ユーザーでログイン
            await axios.post('/api/login', credentials);
            await dispatch('me');
        },

・getMemosを.then.catchで書いたらバグった
    //  async getMemos({ commit }) {
        // const response = await axios.get("http://127.0.0.1:8000/api/memos")
        // .then(() => {
        //     console.log(repsonse)
        //     commit('setMemos', response.data)
        //     commit('setMaxMemo', response.data.length)
        //     commit('setRandomMemo')
        //     // メモが0の時、初回の説明画面を表示するためのフラグを設定する
        //     if(response.data.length === 0){
        //         commit('setFirstFlag',true);
        //     }else{
        //         commit('setFirstFlag',false);
        //     }
        // })
        // .catch((error) => {
        //     console.log(error.state)
        // });
    async getMemos({ commit }) {
            try {
                const response = await axios.get("http://127.0.0.1:8000/api/memos")
                // レスポンスを確認
                console.log(response.data)
                // 各メモをセット
                commit('setMemos',response.data)
                commit('setMaxMemo', response.data.length)
                commit('setRandomMemo')
                // 三項演算子で書き換え
                response.data.length === 0 
                    ? commit('setFirstFlag',true) 
                    : commit('setFirstFlag',false);
            } catch (error) {
                console.error(error)
            }
        },    

・毎回出てくる注意文を消す
        vue-router.esm-bundler.js?ec2d:72 [Vue Router warn]: The "next" callback was called more than once in one navigation guard when going from "/login?redirect=/" to "/memoForm". It should be called exactly one time in each navigation guard. This will fail in production.
    調べると、使っていたのはVue Routerバージョン3の時のやり方
        router.beforeEach((to, from,next) => {
            // metaフィールドをチェック
            if (to.matched.some(record => record.meta.isAuthenticated)) {
                if (!store.state.isAuth) {
                    next({ name: 'Login' });
                } else {
                    next();
                }
            }
            next();
        });
    Vue Routerバージョン4を使ってるので公式に書いてるやり方に変える
        router.beforeEach((to, from) => {
            // metaフィールドをチェック
            if (to.meta.isAuthenticated && !store.state.isAuth) {
                return {
                    path: '/login',
                    // 後で戻ってくる場所を保存
                    query: { redirect: to.fullPath },
                }
            }
        })
    →注意文消えた

・ドロップダウン不要なので消す
    ドロップダウン
        <li class="nav-item dropdown">
            <a
              class="nav-link dropdown-toggle"
              href="#"
              id="dropdown"
              data-bs-toggle="dropdown"
              aria-haspopup="true"
              aria-expanded="false"
              >ドロップダウン</a
            >
            <div class="dropdown-menu" aria-labelledby="dropdown">
              <a 
                  href="#"
                  class="dropdown-item" 
                  @click="changeShow()"
              >過去メモ非表示</a>
              <a class="dropdown-item" href="#">リンク2</a>
              <a class="dropdown-item" href="#">リンク3</a>
            </div>
        </li>

＜参考＞
・jsonからとってきてデータ一覧を表示
https://blog.capilano-fw.com/?p=432#Vue
・vuexのstoreでconsole.logを書く場所
https://dev83.com/vue-vuex04/
・メモフォーム
https://www.yuu-progra.com/2020/09/20/laravel-vue-3/
・CRUD処理
https://qiita.com/kennsukea/items/2f103a6055ebb37b377d
・CSRFトークンの挿入
https://migisanblog.com/laravel-vue-install/#サンプルVueコンポーネントの確認
・画面の表示・非表示
https://noumenon-th.net/programming/2019/05/07/v-if-v-show/
・検索
https://www.webopixel.net/javascript/1461.html
・ルーターリンクをボタンタグに
https://www.webdevqa.jp.net/ja/button/vuejs%E3%81%AE%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A7%E3%83%AB%E3%83%BC%E3%82%BF%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%AF%E3%82%BF%E3%82%B0%E3%82%92%E5%9B%B2%E3%82%80/832905295/
・戻るボタンなど「router.」
https://next.router.vuejs.org/guide/essentials/navigation.html#replace-current-location
・Sanctum
https://readouble.com/laravel/8.x/ja/sanctum.html
https://qiita.com/hikkappi/items/b95626bb51bbf2ebcd2d
https://wonwon-eater.com/laravel-sanctum-vue/#outline__7
https://maasaablog.com/development/laravel/1011/#toc14
・user_idを紐づける
https://qiita.com/kennsukea/items/2f103a6055ebb37b377d
https://qiita.com/yyy752/items/d75f329d04e724e9d714
・ログインユーザーのデータのみを取り出す
http://taustation.com/laravel-acquiring-data-of-logged-in-user/
・メモを新規作成するときログインユーザーのidを紐づける
https://nebikatsu.com/8570.html/

php artisan tinker
\App\Models\User::factory()->create(['name' => 'genba neko', 'email' => 'neko@neko.jp', 'password' => bcrypt('nekoneko')]);

セキュリティ：
(1) 機密性の高いデータを保存しない (必要なければ)。 
(2) ユーザーに与えるアクセス権 はできるだけ小さくする。 
(3) サードパーティライブラリの利用をでき あるあるだけ避ける (コードが少ないほど､ 脆弱性も少ない)。
(4) 利用されなくなった機能を削除する (コードを減らし、 脆弱性を減らす)。

機能設計
    ＜全体＞
    ・スマホ対応、横向き縦向き対応

    ＜ユーザーができること＞
    ○・メモを作成、編集、削除、一覧表示できる。

    ○・過去メモ表示を非表示

    ・ユーザーごとにアカウントを持ち、ログインしたユーザーは自分のメモだけを閲覧または編集することができる。

    ・ユーザーはパスワードを忘れた場合には再登録することができる。

    ＜メモ＞
    ・タイトル、メモの中身、更新日、作成日、ユーザーIdを持つ。

    ○・メモをタップすると編集画面に遷移

    ○・メモを保存せず終了、戻るボタンを押したら、注意メッセージ

    ・入力値バリデーション：タイトルはnull許容。VARCHAR(20)、max:20

    ○・過去のメモ：右部にランダム表示。再読み込みボタンを押せばもう一度ランダム表示。メモをタップすればメモ編集画面に遷都。


画面設計
    ・オン/オフボタン：トグルスイッチ。オンオフを文字で表示
    ・よく使う機能は格納しない：「メモ新規作成」など

開発
    php artisan serve
    npm run watch
        
    モデルとマイグレーションを同時に作成
    php artisan make:model 名(最初大文字。単数形) --migration

    DBにテーブル作成
    php artisan migrate

    ダミーデータを作る
    php artisan make:seeder ダミーデータ名(UsersTableSeeder)

    DatabaseSeeder.phpに今書いたファイル名を登録

    シードを実行
    php artisan db:seed

    ※シードが重複登録されてしまったとき
    php artisan migrate:fresh --seed

    コントローラーを作る
    php artisan make:controller コントローラー名(UserController) --api

    routes/web.phpにルート情報を追加

    バリデーションのためにフォームリクエストクラスを作成
    $ php artisan make:request リクエスト名(CreateMemoRequest)

    pages/にページ追加→router.jsを編集。※import忘れずに

テスト
    テストライブラリを使う

    インメモリを使う？

    Registerすべて消す？使ってないファイル消す方法探す？


